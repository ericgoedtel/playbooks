---
- name: Configure storage servers
  hosts: storage
  pre_tasks:
    - name: Install public key
      ansible.posix.authorized_key:
        exclusive: true
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
        user: "{{ ansible_user }}"
      when: install_ssh_keys
      tags: install_keys

    - name: Install default apt packages
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop: "{{ default_packages }}"
      become: true
      tags: packages

    - name: Install group apt packages
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop: "{{ group_packages }}"
      become: true
      tags: packages

    - name: Configure SMART testing
      ansible.builtin.template:
        src: smartd.conf.j2 # Uses `devices`
        dest: /etc/smartd.conf
        owner: root
        group: root
        mode: "0644"
      become: true
      notify: Restart smartd
      tags: monitoring, storage, smart

    - name: Check for SnapRAID install
      ansible.builtin.stat:
        path: /usr/local/bin/snapraid
      tags: snapraid

    - name: Create build directory
      ansible.builtin.file:
        path: "{{ snapraid_build_path }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0775"
      tags: snapraid

    - name: Download SnapRAID
      ansible.builtin.get_url:
        url: "{{ snapraid_url }}"
        dest: "{{ snapraid_build_path }}"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0664"
        force: false
      tags: snapraid

    - name: Extract SnapRAID
      ansible.builtin.unarchive:
        src: "{{ snapraid_build_path }}/snapraid-{{ snapraid_release }}.tar.gz"
        dest: "{{ snapraid_build_path }}"
        remote_src: true
        creates: "{{ snapraid_build_path }}/snapraid-{{ snapraid_release }}"
      tags: snapraid

    - name: Make and build SnapRAID
      ansible.builtin.shell:
        chdir: "{{ snapraid_build_path }}/snapraid-{{ snapraid_release }}"
        cmd: "./configure && make"
        creates: "{{ snapraid_build_path }}/snapraid-{{ snapraid_release }}/snapraid"
      tags: snapraid

    - name: Install SnapRAID
      ansible.builtin.command:
        chdir: "{{ snapraid_build_path }}/snapraid-{{ snapraid_release }}"
        cmd: "make install"
        creates: "/usr/local/bin/snapraid"
      become: true
      tags: snapraid

    - name: Configure SnapRAID
      ansible.builtin.template:
        src: snapraid.conf.j2
        dest: /etc/snapraid.conf
        owner: root
        group: root
        mode: "0644"
      become: true
      tags: snapraid

    - name: Create SnapRAID log path
      ansible.builtin.file:
        path: /var/log/snapraid/
        state: "directory"
        owner: root
        group: root
        mode: "0644"
      become: true
      tags: snapraid

    - name: Add partitions for each disk device
      community.general.parted:
        device: "{{ item.name }}"
        label: "gpt"
        name: "pool-{{ item.pool }}-{{ item.use }}-{{ index }}"
        number: 1
        state: "present"
        unit: "TB"
      loop: "{{ devices }}"
      loop_control:
        index_var: index
      register: partitions
      become: true
      tags: storage, partitions

    - name: Create data disk filesystems from partitioned disks
      community.general.filesystem:
        dev: "/dev/disk/by-partlabel/{{ item }}"
        force: false # Definitely don't allow this
        fstype: "ext4"
        state: "present"
      loop: "{{ partitions.results | map(attribute='partitions') | map('first') | map(attribute='name') | list }}"
      become: true
      tags: storage, filesystems

    - name: Create data disk folder structure
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: "directory"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "755"
      loop: "{{ devices }}"
      become: true
      tags: storage, paths

    - name: Create nfs share structure
      ansible.builtin.file:
        path: "{{ item.path }}"
        state: "directory"
        owner: "nobody"
        group: "nogroup"
        mode: "755"
      loop: "{{ nfs_shares }}"
      become: true
      tags: storage, nfs, paths

    - name: Set nfs share permissions and ownership
      ansible.builtin.file:
        path: "{{ item.path }}"
        owner: "{{ nobody_id['user'] }}"
        group: "{{ nobody_id['group'] }}"
        mode: "0755"
        recurse: true
      loop: "{{ devices | selectattr('pool', 'equalto', 'shares') }}"
      become: true
      tags: storage, nfs, paths

    - name: Configure NFS exports
      ansible.builtin.template:
        src: exports.j2
        dest: /etc/exports
        owner: root
        group: root
        mode: "0644"
      notify:
        - Restart nfs
      become: true
      tags: storage, nfs

    - name: Create iscsi device paths
      ansible.builtin.file:
        path: "{{ root_iscsi_path }}/{{ item.name }}"
        state: directory
        owner: root
        group: root
        mode: "0600"
        recurse: true
      loop: "{{ iscsi_devices }}"
      become: true
      tags: storage, iscsi
      register: file_result

    - name: Create iscsi device image files
      community.general.filesize:
        path: "{{ root_iscsi_path }}/{{ item.name }}/disk.img"
        size: "{{ item.size | default('3G') }}"
        sparse: true
      loop: "{{ iscsi_devices }}"
      become: true
      tags: storage, iscsi
      register: filesize_result

    - name: Partition the image files
      community.general.parted:
        device: "{{ item.path }}"
        label: gpt
        name: "{{ (item.path | split('/'))[4] }}" # kludge to label it by path
        number: 1
        state: present
        part_type: primary
        fs_type: ext4
      loop: "{{ filesize_result.results }}"
      become: true
      tags: storage, iscsi
      register: parted_result

    - name: Write filesystems for iscsi targets
      community.general.filesystem:
        dev: "{{ item.disk.dev }}"
        force: false # Definitely don't allow this
        fstype: ext4
        state: present
      loop: "{{ parted_result.results }}"
      become: true
      tags: storage, iscsi

    - name: Write iscsi target configurations
      ansible.builtin.template:
        src: iscsi.conf.j2
        dest: "/etc/tgt/conf.d/{{ item.name }}.conf"
        owner: root
        group: root
        mode: "0644"
      loop: "{{ iscsi_devices }}"
      become: true
      notify:
        - Restart tgt
      tags: storage, iscsi

    # Kludgey hack which assumes only one part per disk
    - name: Automount media data disk filesystems
      ansible.posix.mount:
        backup: true
        boot: true
        fstype: ext4
        path: "{{ item.path }}"
        src: "{{ item.name }}-part1"
        state: mounted
      loop: "{{ devices | selectattr('pool', 'in', ['media']) }}" # TODO: Probably should set this as a variable
      loop_control:
        index_var: index
      become: true
      tags: storage, automount

    - name: Automount mergerfs pools
      ansible.posix.mount:
        backup: true
        boot: true
        fstype: fuse.mergerfs
        opts: "moveonenospc=true"
        path: "{{ item.path }}"
        src: "{{ root_pool_path }}/{{ item.name }}/disks/*"
        state: "mounted"
      loop: "{{ mergerfs_pools }}"
      become: true
      tags: storage, automount

    - name: Automount nfs shares
      ansible.posix.mount:
        backup: true
        boot: true
        fstype: ext4
        path: "{{ item.path }}"
        src: "{{ item.name }}-part1"
        state: "mounted"
      loop: "{{ devices | selectattr('pool', 'equalto', 'shares') }}"
      become: true
      tags: storage, nfs, automount

    - name: Schedule snapraid sync
      ansible.builtin.cron:
        name: snapraid-sync
        special_time: daily
        job: /usr/local/bin/snapraid sync -l /var/log/snapraid/sync.log
      become: true
      tags: snapraid, logging

    - name: Schedule snapraid scrub
      ansible.builtin.cron:
        name: snapraid-scrub
        special_time: weekly
        job: /usr/local/bin/snapraid scrub -l /var/log/snapraid/scrub.log
      become: true
      tags: snapraid, logging

  roles:
    - role: nickhammond.logrotate
      tags: logging, monitoring
      become: true

  handlers:
    - name: Restart smartd
      ansible.builtin.systemd:
        name: smartmontools
        state: restarted
      become: true
    - name: Restart nfs
      ansible.builtin.systemd:
        name: nfs-kernel-server
        state: restarted
      become: true
    - name: Restart tgt
      ansible.builtin.systemd:
        name: tgt
        state: restarted
      become: true
