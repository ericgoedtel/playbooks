---
- hosts: nodes
  pre_tasks:
    - name: Install public key
      ansible.posix.authorized_key:
        exclusive: true
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
        user: "{{ ansible_user }}"
      when: install_ssh_keys
      tags: bootstrap, ssh

    - name: Disable swap
      ansible.builtin.shell: swapoff -a
      become: true
      tags: bootstrap, swap

    - name: Permanently unmount swap
      ansible.builtin.lineinfile:
        path: /etc/fstab
        regexp: "^.*swap.*"
        state: absent
      become: true
      tags: bootstrap, swap

    - name: Update APT package cache
      ansible.builtin.apt:
        update_cache: yes
      become: yes
      tags: bootstrap, packages, apt

    - name: Install default apt packages
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop: "{{ default_packages }}"
      become: yes
      tags: bootstrap, packages, apt

    - name: Install remote pip packages
      ansible.builtin.pip:
        virtualenv: "{{ virtualenv_root }}"
        name: "{{ item.name }}{{ item.version | default('') }}"
      loop: "{{ pip_packages }}"
      tags: bootstrap, packages, pip, kubernetes

  post_tasks: # Run these after k8s installation
    - name: Autoremove Apt packages
      ansible.builtin.apt:
        autoremove: true
        autoclean: true
      become: true
      tags: packages

    # TODO: Probably should move this to a role
    - name: Create ArgoCD namespace
      kubernetes.core.k8s:
        kubeconfig: "{{ k3s_kubeconf_file }}"
        state: present
        kind: Namespace
        name: "{{ argocd_namespace }}"
      tags: argo
      become: yes
      vars:
        ansible_python_interpreter: "{{ virtualenv_root }}/bin/python"

    - name: Install ArgoCD
      kubernetes.core.k8s:
        kubeconfig: "{{ k3s_kubeconf_file }}"
        namespace: "{{ argocd_namespace }}"
        state: present
        src: "{{ argocd_manifest_path }}"
      tags: kubernetes, argo
      become: yes
      vars:
        ansible_python_interpreter: "{{ virtualenv_root }}/bin/python"

    - name: Patch ArgoCD ConfigMap
      kubernetes.core.k8s:
        kubeconfig: "{{ k3s_kubeconf_file }}"
        namespace: "{{ argocd_namespace }}"
        state: patched
        kind: ConfigMap
        name: argocd-cmd-params-cm
        definition:
          data:
            server.disable.auth: "true"
            server.insecure: "true"
            server.rootpath: /argocd
      tags: kubernetes, argo
      register: configmap
      become: yes
      vars:
        ansible_python_interpreter: "{{ virtualenv_root }}/bin/python"

    - name: Restart ArgoCD
      ansible.builtin.shell: |
        kubectl rollout restart deployment argocd-server -n {{ argocd_namespace}}
      become: true
      tags: kubernetes, argo
      when: configmap.changed

    - name: Expose ArgoCD server
      kubernetes.core.k8s:
        kubeconfig: "{{ k3s_kubeconf_file }}"
        namespace: "{{ argocd_namespace }}"
        state: present
        definition:
          apiVersion: traefik.containo.us/v1alpha1
          kind: IngressRoute
          metadata:
            name: argocd
            annotations:
              external-dns.alpha.kubernetes.io/target: amolicob.cloud
          spec:
            routes:
              - kind: Rule
                match: Host(`ship.amolicob.cloud`)
                priority: 0
                services:
                  - kind: Service
                    name: argocd-server
                    namespace: "{{ argocd_namespace }}"
                    port: 80
      tags: kubernetes, argo
      become: yes
      vars:
        ansible_python_interpreter: "{{ virtualenv_root }}/bin/python"

    - name: Configure ApplicationSet
      kubernetes.core.k8s:
        kubeconfig: "{{ k3s_kubeconf_file }}"
        namespace: "{{ argocd_namespace }}"
        state: present
        definition:
          apiVersion: argoproj.io/v1alpha1
          kind: ApplicationSet
          metadata:
            name: origin
          spec:
            generators:
              - list:
                  elements:
                    - project: kinokube
                    - project: cluster-addons
                    - project: infrastructure
            template:
              metadata:
                name: "{{ '{{' }}project{{ '}}' }}"
              spec:
                project: default # TODO: Actually set this
                source:
                  repoURL: "{{ argo_applications_repo }}"
                  targetRevision: HEAD
                  path: "projects/{{ '{{' }}project{{ '}}' }}"
                destination: # TODO: Probably should define clusters and not rely on it being local
                  server: "https://kubernetes.default.svc"
                  namespace: "argocd" # For 'infrastructural' appsets
                syncPolicy: # TODO: Turn these on when things are settled.
                  syncOptions:
                    - CreateNamespace=false
                  # automated:
                  #   prune: true
                  #   selfHeal: false
      tags: kubernetes, argo, origin
      become: yes
      vars:
        ansible_python_interpreter: "{{ virtualenv_root }}/bin/python"

  roles:
    - role: pyratlabs.k3s
      tags: kubernetes, k3s
