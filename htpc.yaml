---
- hosts: all
  pre_tasks:
    - name: Install public key
      ansible.posix.authorized_key:
        exclusive: true
        key: "{{ lookup('file', '~/.ssh/id_rsa.pub') }}"
        user: "{{ ansible_user }}"
      when: install_ssh_keys
      tags: install_keys
 
    - name: Install default apt packages
      ansible.builtin.package:
        name: "{{ item }}"
        state: present
      loop: "{{ default_packages }}"
      become: yes
      tags: packages

    - name: Install default pip packages
      ansible.builtin.pip:
        name: "{{ item }}"
        state: present
        executable: /usr/bin/pip3 # from apt package
      loop: ["kubernetes"]
      become: yes
      tags: packages

    - name: Configure SMART testing
      ansible.builtin.template:
        src: templates/smartd.conf.j2
        dest: /etc/smartd.conf
        owner: root
        group: root
        mode: '0644'
      vars:
        devices: "{{ device_paths['parity'] + device_paths['data'] + device_paths['cache'] }}"
      become: yes
      notify: Restart smartd
      tags: monitoring,storage

    - name: Check for SnapRAID install
      ansible.builtin.stat:
        path: /usr/local/bin/snapraid
      register: snapraid_installation
      tags: snapraid

    - name: Create build directory
      ansible.builtin.file:
        path: "{{ snapraid_build_path }}"
        state: directory
      tags: snapraid

    - name: Download SnapRAID
      ansible.builtin.get_url:
        url: "{{ snapraid_url }}"
        dest: "{{ snapraid_build_path }}"
      when: not snapraid_installation.stat.exists
      tags: snapraid

    - name: Extract SnapRAID
      ansible.builtin.unarchive:
        src: "{{ snapraid_build_path }}/snapraid-{{ snapraid_release }}.tar.gz"
        dest: "{{ snapraid_build_path }}"
        remote_src: true
      register: snapraid_extraction
      when: not snapraid_installation.stat.exists
      tags: snapraid

    - name: Make and build SnapRAID
      ansible.builtin.shell:
        chdir: "{{ snapraid_build_path }}/snapraid-{{ snapraid_release }}"
        cmd: "./configure && make"
      when: snapraid_extraction.changed
      tags: snapraid

    - name: Install SnapRAID
      ansible.builtin.shell:
        chdir: "{{ snapraid_build_path }}/snapraid-{{ snapraid_release }}"
        cmd: "make install"
      become: yes
      when: not snapraid_installation.stat.exists
      tags: snapraid

    - name: Configure SnapRAID
      ansible.builtin.template:
        src: templates/snapraid.conf.j2
        dest: /etc/snapraid.conf
        owner: root
        group: root
        mode: "0644"
      become: yes
      tags: snapraid

    - name: Create SnapRAID log path
      ansible.builtin.file:
        path: /var/log/snapraid/
        state: "directory"
        owner: root
        group: root
        mode: "0644"
      become: yes
      tags: snapraid

    - name: Add partitions for data disks
      community.general.parted:
        device: "/dev/disk/by-id/{{ item }}"
        label: "gpt"
        name: "pool-media-{{ index }}"
        number: 1
        state: "present"
        unit: "TB"
      loop: "{{ device_paths['data'] | flatten(levels=1) }}"
      loop_control:
        index_var: index
      become: yes
      tags: storage, partitions

    - name: Add partitions for parity disks
      community.general.parted:
        device: "/dev/disk/by-id/{{ item }}"
        label: "gpt"
        name: "pool-parity-{{ index }}"
        number: 1
        state: "present"
        unit: "TB"
      loop: "{{ device_paths['parity'] | flatten(levels=1) }}"
      loop_control:
        index_var: index
      become: yes
      tags: storage, partitions

    - name: Add partitions for cache disks
      community.general.parted:
        device: "/dev/disk/by-id/{{ item }}"
        label: "gpt"
        name: "pool-cache-{{ index }}"
        number: 1
        state: "present"
        unit: "TB"
      loop: "{{ device_paths['cache'] | flatten(levels=1) }}"
      loop_control:
        index_var: index
      become: yes
      tags: storage, partitions

    - name: Create data disk filesystems
      community.general.filesystem:
        dev: "/dev/disk/by-partlabel/pool-media-{{ index }}"
        force: false  # Definitely don't allow this
        fstype: "ext4"
        state: "present"
      loop: "{{ device_paths['data'] | flatten(levels=1) }}"
      loop_control:
        index_var: index
      become: yes
      tags: storage, filesystems

    - name: Create parity disk filesystems
      community.general.filesystem:
        dev: "/dev/disk/by-partlabel/pool-parity-{{ index }}"
        force: false  # Definitely don't allow this
        fstype: "ext4"
        state: "present"
      loop: "{{ device_paths['parity'] | flatten(levels=1) }}"
      loop_control:
        index_var: index
      become: yes
      tags: storage, filesystems

    - name: Create cache disk filesystems
      community.general.filesystem:
        dev: "/dev/disk/by-partlabel/pool-cache-{{ index }}"
        force: false  # Definitely don't allow this
        fstype: "ext4"
        state: "present"
      loop: "{{ device_paths['parity'] | flatten(levels=1) }}"
      loop_control:
        index_var: index
      become: yes
      tags: storage, filesystems

    - name: Create data disk folder structure
      ansible.builtin.file:
        path: "{{ media_pool_root }}/disks/{{ index }}"
        state: "directory"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "755"
      loop: "{{ device_paths['data'] | flatten(levels=1) }}"
      loop_control:
        index_var: index
      become: yes
      tags: storage, paths

    - name: Create parity disk folder structure
      ansible.builtin.file:
        path: "{{ media_pool_root }}/disks/{{ index }}"
        state: "directory"
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "755"
      loop: "{{ device_paths['data'] | flatten(levels=1) }}"
      loop_control:
        index_var: index
      become: yes
      tags: storage, paths

    - name: Automount data disk filesystems
      ansible.posix.mount:
        backup: true
        boot: yes
        fstype: ext4
        path: "{{ media_pool_root }}/disks/{{ index }}"
        src: "/dev/disk/by-partlabel/pool-media-{{ index }}"
        state: "mounted"
      loop: "{{ device_paths['data'] | flatten(levels=1) }}"
      loop_control:
        index_var: index
      become: yes
      tags: storage, automount

    - name: Automount parity disk filesystems
      ansible.posix.mount:
        backup: true
        boot: yes
        fstype: ext4
        path: "{{ media_pool_root }}/parity/{{ index }}"
        src: "/dev/disk/by-partlabel/pool-parity-{{ index }}"
        state: "mounted"
      loop: "{{ device_paths['parity'] | flatten(levels=1) }}"
      loop_control:
        index_var: index
      become: yes
      tags: storage, automount

    - name: Automount download caches
      ansible.posix.mount:
        backup: true
        boot: yes
        fstype: ext4
        path: "{{ htpc_root }}/downloads/"
        src: "/dev/disk/by-partlabel/pool-cache-0"
        state: "mounted"
      become: yes
      tags: storage, automount, cache

    - name: Create HTPC folder structure
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        owner: "{{ ansible_user }}"
        group: "{{ ansible_user }}"
        mode: "0755"
      loop: [ "{{ htpc_root }}", "{{ media_mount_path }}" ]
      become: yes
      tags: storage, argo, htpc

    - name: Automount mergerfs pool
      ansible.posix.mount:
        backup: true
        boot: yes
        fstype: fuse.mergerfs
        opts: "moveonenospc=true"
        path: "{{ media_mount_path }}"
        src: "{{ media_pool_root }}/disks/*"
        state: "mounted"
      become: yes
      tags: storage, automount

    - name: Schedule snapraid sync
      ansible.builtin.cron:
        name: snapraid-sync
        special_time: daily
        job: /usr/local/bin/snapraid sync -l /var/log/snapraid/sync.log
      become: yes
      tags: snapraid, logging

    - name: Schedule snapraid scrub
      ansible.builtin.cron:
        name: snapraid-scrub
        special_time: weekly
        job: /usr/local/bin/snapraid scrub -l /var/log/snapraid/scrub.log
      become: yes
      tags: snapraid, logging

    - name: Clone deployment tooling repo
      ansible.builtin.git:
        clone: true
        depth: 1
        dest: "{{ htpc_root }}"
        repo: https://github.com/ericgoedtel/htk8s
        version: main
      tags: argo, htpc

  post_tasks:  # Run these after k8s installation
    - name: Apply deployment tooling installer
      kubernetes.core.k8s:
        src: "{{ htpc_root }}/install_argocd.yaml"
        kubeconfig: "/etc/rancher/k3s/k3s.yaml" # On the remote
      become: yes
      tags: argo, htpc, kubernetes

  roles:
     - role: pyratlabs.k3s
       tags: kubernetes

     - role: nickhammond.logrotate
       tags: logging, monitoring
       become: yes

  handlers:
    - name: Restart smartd
      systemd:
        name: smartmontools
        state: restarted
      become: yes

      # TODO: make sure notifications for smart checks go somewhere
      # TODO: where on earth is var log messages/syslog
      # TODO: Monitor everything else
